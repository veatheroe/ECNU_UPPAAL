<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
//global time
clock t;
// passed vehicle number
int vNum = 0;
const int travelTime = 4;
int initial = 0;
const int t_0 = 1;
const int t_app_H = 5; 
const int N = 4;
typedef int[0,N-1] id_t;
//four single line matrix
int matrix_t[4][4] = {{0,0,1,0},
                 {0,0,0,1},
                 {1,0,0,0},
                 {0,1,0,0}};

//how long did one Vehicle waiting in the ApproachingNotConfirmed state
int waitList[4] = {0,0,0,0};
broadcast chan request[N],request2[N],confirm[N],confirm2[N],cross[N],alloc[N], popFirst;


//const int delay = 1;
const int tout = 4;
const int tout_resend = 8;
const int tout_wait = 8;
int[0, N] list[N+1];
int[0, N] len;

clock t_global;
clock   in_clock[N];
clock out_clock[N];
int testtemp = 0;
int vPath[N];
hybrid clock pathTime[N];
hybrid clock gPath;
hybrid clock totalTravelTime;
</declaration>
	<template>
		<name x="5" y="5">Controller</name>
		<declaration>// Place local declarations here.
int re_alloc = 0;
int alloc_id = 0;
clock t_local_m;
int old_id = 10;

void dequeue(id_t i)
{
    len = len - 1;
    while (i &lt; len) {
       list[i] = list[i + 1];
       i++;
    }
    list[i] = 0;
}
bool checkStay(){
    int i = 0;
    for(i = 0;i&lt;N;i++){
        if(waitList[i]!=0)
            return false;
    }
    return true;

}
bool checkQueue(id_t element){
    int i = 0;
    for(i = 0;i&lt;N;i++){
        if(list[i]==element+1)
            return true;
    }
    return false;
}

void enqueue(id_t element)
{
    bool flag = 0;
    int i = 0;
    int j = 0;
    int idx = 0;

    for(i=0; i&lt;len; i++) {
        if (list[i] == element + 1) {
            flag = 1;
            idx = i;
        }
    }

    if (flag == 0) {
        list[len] = element+1;
        len = len + 1;
    }
    /*else if (flag == 1 &amp;&amp; idx &lt; len-1) {
         for (j=idx; j&lt;len-1; j++) {
               list[j] = list[j+1];
         }
         list[len-1] = element+1;
    }*/

}


id_t pop()
{
    
    return list[0]-1;
}
bool checkConflit(id_t current,int len){
    int index = 0;
    if(len&gt;0){
        for(index = 0;index&lt;len;index++){
            if(matrix_t[index][current]==0)
                return false;
        }
        return true;
    }
    return true;
}</declaration>
		<location id="id0" x="-263" y="-127">
			<urgent/>
		</location>
		<location id="id1" x="-144" y="76">
			<urgent/>
		</location>
		<location id="id2" x="-144" y="-34">
			<name x="-154" y="-68">Idle</name>
			<label kind="exponentialrate" x="-154" y="0">1000</label>
		</location>
		<location id="id3" x="204" y="-34">
			<name x="194" y="-68">Busy</name>
			<urgent/>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-357" y="-76">alloc[re_alloc]!</label>
			<label kind="assignment" x="-382" y="-59">enqueue(re_alloc)</label>
			<nail x="-263" y="-34"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="select" x="-238" y="-178">f:id_t</label>
			<label kind="guard" x="-238" y="-144">waitList[f]&gt;0&amp;&amp;
!checkQueue(f)</label>
			<label kind="synchronisation" x="-238" y="-110">request2[f]?</label>
			<label kind="assignment" x="-238" y="-161">re_alloc = f</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-119" y="25">alloc[re_alloc]!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="select" x="-229" y="34">f:id_t</label>
			<label kind="guard" x="-289" y="51">waitList[f]&gt;0&amp;&amp;
checkQueue(f)</label>
			<label kind="synchronisation" x="-272" y="93">request2[f]?</label>
			<label kind="assignment" x="-272" y="110">re_alloc = f</label>
			<nail x="-212" y="25"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-8" y="-17">alloc[alloc_id]!</label>
			<nail x="42" y="51"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="select" x="-51" y="-76">e:id_t</label>
			<label kind="guard" x="-51" y="-119">checkStay()&amp;&amp;!checkQueue(e)&amp;&amp;
checkConflit(e,len)</label>
			<label kind="synchronisation" x="-51" y="-59">request2[e]?</label>
			<label kind="assignment" x="-8" y="-34">alloc_id = e,enqueue(e)</label>
		</transition>
	</template>
	<template>
		<name>Vehicle</name>
		<parameter>const id_t id</parameter>
		<declaration>// Place local declarations here.
clock t_local_v;
clock localTravelTime;

bool requestSent;
int vdt = 0;
int ran = 0;
int poisonNum(int lambda){
    int k = 0;
    int L = lambda;
    double p = 0.0;
    do{
        k += 1;
        p = p - ln(random(1));
    }
    while(p&lt;L);
    return k-1 &lt; 1 ? 1 : k-1;
}
void accumulate(id_t i){
    if(waitList[i]&lt;30){
        waitList[i]++;
    }
}</declaration>
		<location id="id4" x="-714" y="-229">
			<name x="-724" y="-263">Intial</name>
			<label kind="invariant" x="-724" y="-212">pathTime[id]' ==0</label>
			<label kind="exponentialrate" x="-722" y="-204">100</label>
		</location>
		<location id="id5" x="-433" y="-229">
			<name x="-443" y="-263">ApproachingNotConfirmed</name>
			<label kind="invariant" x="-399" y="-238">t_local_v&lt;=tout_resend&amp;&amp;
pathTime[id]' ==1</label>
			<label kind="exponentialrate" x="-443" y="-195">10</label>
		</location>
		<location id="id6" x="-433" y="-102">
			<name x="-450" y="-93">ApproachingConfirmed</name>
			<label kind="invariant" x="-450" y="-76">t_local_v&lt;=vdt&amp;&amp;
pathTime[id]' ==1</label>
		</location>
		<location id="id7" x="-578" y="-102">
			<name x="-671" y="-85">CrossIntersection</name>
			<urgent/>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="-356" y="-178">t_local_v ==t_app_H</label>
			<label kind="assignment" x="-357" y="-161">t_local_v:=0</label>
			<nail x="-356" y="-169"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="guard" x="-476" y="-348">t_local_v==tout_resend</label>
			<label kind="synchronisation" x="-476" y="-331">request[id]!</label>
			<label kind="assignment" x="-476" y="-314">t_local_v:=0,
accumulate(id)</label>
			<nail x="-501" y="-297"/>
			<nail x="-391" y="-297"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-748" y="-136">cross[id]!</label>
			<label kind="assignment" x="-892" y="-195">waitList[id] = 0,vNum++,
vPath[id] =0,
totalTravelTime =totalTravelTime + localTravelTime,
localTravelTime = 0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-561" y="-127">t_local_v==vdt</label>
			<label kind="assignment" x="-560" y="-102">t_local_v:=0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-484" y="-187">confirm2[id]?</label>
			<label kind="assignment" x="-603" y="-170">t_local_v:=0,vdt = poisonNum(3),
vPath[id] =1</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-560" y="-246">request[id]!</label>
			<label kind="assignment" x="-646" y="-229">t_local_v:=0,requestSent:=1,
localTravelTime = 0</label>
		</transition>
	</template>
	<template>
		<name>Global</name>
		<location id="id8" x="0" y="0">
			<label kind="invariant" x="-144" y="17">totalTravelTime' == 0 &amp;&amp;
gPath' ==sum(i:id_t) vPath[i]</label>
		</location>
		<init ref="id8"/>
	</template>
	<template>
		<name>Timer</name>
		<parameter>id_t id</parameter>
		<declaration>clock t_local_m;
int old_id = 10;

void dequeue(id_t i)
{
    len = len - 1;
    while (i &lt; len) {
       list[i] = list[i + 1];
       i++;
    }
    list[i] = 0;
}
void dequeueById(id_t i)
{
    int j = 0;
    for(j = 0;j&lt;len;j++){
        if(list[j]==i+1){
            int q = j;       
            while(q&lt;len){
               list[q] = list[q + 1];
               q++;                
            }
        }
    }
}

void enqueue(id_t element)
{
    bool flag = 0;
    int i = 0;
    int j = 0;
    int idx = 0;

    for(i=0; i&lt;len; i++) {
        if (list[i] == element + 1) {
            flag = 1;
            idx = i;
        }
    }

    if (flag == 0) {
        list[len] = element+1;
        len = len + 1;
    }
    /*else if (flag == 1 &amp;&amp; idx &lt; len-1) {
         for (j=idx; j&lt;len-1; j++) {
               list[j] = list[j+1];
         }
         list[len-1] = element+1;
    }*/

}


id_t pop()
{
    
    return list[0]-1;
}</declaration>
		<location id="id9" x="-442" y="-110">
			<name x="-510" y="-127">Ready</name>
		</location>
		<location id="id10" x="-297" y="-110">
			<name x="-322" y="-144">occupied</name>
			<urgent/>
		</location>
		<location id="id11" x="-119" y="-110">
			<name x="-129" y="-144">Waiting</name>
			<label kind="invariant" x="-136" y="-93">t_local_m&lt;=tout_wait</label>
		</location>
		<init ref="id9"/>
		<transition>
			<source ref="id11"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-357" y="-246">cross[id]?</label>
			<label kind="assignment" x="-357" y="-229">t_local_m :=0,
dequeueById(id),
len--</label>
			<nail x="-442" y="-195"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id9"/>
			<label kind="guard" x="-374" y="-34">t_local_m==tout_wait</label>
			<label kind="assignment" x="-374" y="-51">t_local_m:=0</label>
			<nail x="-442" y="-34"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-272" y="-127">confirm[id]!</label>
			<label kind="assignment" x="-279" y="-110">t_local_m = 0</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-399" y="-127">alloc[id]?</label>
		</transition>
	</template>
	<template>
		<name>In_Channel</name>
		<parameter>id_t id</parameter>
		<declaration>int delay = 0;
int poisonNum(int lambda){
    int k = 0;
    int L = lambda;
    double p = 0.0;
    do{
        k += 1;
        p = p - ln(random(1));
    }
    while(p&lt;L);
    return k-1 &lt; 1 ? 1 : k-1;
}</declaration>
		<location id="id12" x="-85" y="0">
			<name x="-110" y="-34">Idle</name>
		</location>
		<location id="id13" x="195" y="0">
			<name x="204" y="-34">getRequest</name>
			<label kind="invariant" x="185" y="17">in_clock[id] &lt;=delay</label>
		</location>
		<init ref="id12"/>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="17" y="25">request2[id]!</label>
			<label kind="assignment" x="17" y="42">in_clock[id] = 0</label>
			<nail x="76" y="17"/>
			<nail x="25" y="17"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="8" y="-76">request[id]?</label>
			<label kind="assignment" x="17" y="-51">in_clock[id] = 0,
delay = poisonNum(1)</label>
			<nail x="25" y="-17"/>
			<nail x="85" y="-17"/>
		</transition>
	</template>
	<template>
		<name>Out_Channel</name>
		<parameter>id_t id</parameter>
		<declaration>int delay = 0;
int poisonNum(int lambda){
    int k = 0;
    int L = lambda;
    double p = 0.0;
    do{
        k += 1;
        p = p - ln(random(1));
    }
    while(p&lt;L);
    return k-1 &lt; 1 ? 1 : k-1;
}</declaration>
		<location id="id14" x="-76" y="0">
			<name x="-86" y="-34">Idle</name>
		</location>
		<location id="id15" x="222" y="0">
			<name x="212" y="-34">getRequest</name>
			<label kind="invariant" x="212" y="-51">out_clock[id] &lt;=delay</label>
		</location>
		<init ref="id14"/>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="34" y="25">confirm2[id]!</label>
			<label kind="assignment" x="34" y="42">out_clock[id] = 0</label>
			<nail x="119" y="25"/>
			<nail x="34" y="25"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="34" y="-42">confirm[id]?</label>
			<label kind="assignment" x="34" y="-76">out_clock[id] = 0,
delay = poisonNum(1)</label>
			<nail x="34" y="-25"/>
			<nail x="119" y="-25"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
// List one or more processes to be composed into a system.
system Global,Vehicle,Controller,Timer,In_Channel,Out_Channel;
    </system>
	<queries>
		<query>
			<formula>simulate 10 [&lt;=300] {totalTravelTime/(vNum+1)}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr [t&lt;=200](&lt;&gt;  vNum&gt;0 &amp;&amp;totalTravelTime/vNum&gt;25 )
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[pathTime[1]&lt;=10](&lt;&gt; In_Channel(1).delay&lt;10)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr [t&lt;=200](&lt;&gt; exists (i:id_t) Vehicle(i).t_local_v&lt;5)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr [t&lt;=150] (&lt;&gt; (sum(i:id_t) waitList[i]&gt;0)&gt;5)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=100] {In_Channel(0).delay}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr [gPath&lt;=420] (&lt;&gt; t&gt;=100)
			</formula>
			<comment>8 8 
			</comment>
		</query>
		<query>
			<formula>Pr [gPath&lt;=420] (&lt;&gt; t&gt;=100)
			</formula>
			<comment>6 6
			</comment>
		</query>
		<query>
			<formula>Pr [&lt;=200] (&lt;&gt; (sum(i:id_t) waitList[i]&gt;0)&gt;5 &amp;&amp; t&gt;100)
			</formula>
			<comment>在200时间单位内，最终排队队列大于10的概率
			</comment>
		</query>
		<query>
			<formula>Pr [t&lt;=100] (&lt;&gt; t&lt;=1000)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr [t&lt;=1000](&lt;&gt; vNum &gt;=10)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr [t &lt;=5](&lt;&gt; Vehicle(1).CrossIntersection )
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[]not deadlock
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt;  Vehicle(0).CrossIntersection
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr [t&lt;=1000] (&lt;&gt; (sum (i:id_t) Vehicle(i).CrossIntersection)) 
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr [t&lt;=1000] (&lt;&gt; exists (i :id_t) waitList[i]&gt;3) 
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr [t&lt;=10] (&lt;&gt; (sum(i:id_t)  (waitList[i]) ))
			</formula>
			<comment>所有等待车辆之和的概率分布
			</comment>
		</query>
		<query>
			<formula>simulate 1 [t&lt;=100] {sum(i:id_t)  waitList[i]&gt;0 }
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1 [t&lt;=100] {len }
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1  [&lt;=200] {sum(i:id_t)  waitList[i]&gt;0 }
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Vehicle(1).ApproachingNotConfirmed --&gt; Vehicle(1).ApproachingConfirmed
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
